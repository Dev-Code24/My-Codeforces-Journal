var P=(s,e,t)=>new Promise((o,c)=>{var d=l=>{try{m(t.next(l))}catch(a){c(a)}},h=l=>{try{m(t.throw(l))}catch(a){c(a)}},m=l=>l.done?o(l.value):Promise.resolve(l.value).then(d,h);m((t=t.apply(s,e)).next())});import{s as O,g as v,b as T,a as I}from"./axios.js";function w(s,e){return s.filter(t=>{const o=e.verdict?t.verdict===e.verdict:!0,c=e.contestId?t.contestId===e.contestId:!0,d=e.index?t.problem.index===e.index:!0;return o&&c&&d})}function D(s,e){return P(this,null,function*(){O.get(["APP_SCRIPT_URL","CODEFORCES_ID","CURRENT_TAB_URL"],t=>P(this,null,function*(){const{APP_SCRIPT_URL:o,CODEFORCES_ID:c,CURRENT_TAB_URL:d}=t,h=v.replace("CODEFORCES_ID",c),m=`${o}?action=checkProblem`;let l=!1;try{const a=yield fetch(h);let n,u;if(a.ok){const p=yield a.json();if((p==null?void 0:p.status)==="OK"){const r=d.split("/"),g=r.length,E=[r[g-1],r[g-2],r[g-3]];if(E.sort(),n={verdict:"OK",contestId:Number(E[0]),index:E[1]},u=w(p.result,n),l=u.length>0,!l){const L="Solve the problem first, then submit!";console.error(L),e(L,!1);return}}else{const r="Failed to fetch Problem details!";console.error(r),e(r,!1);return}const f=u[0].problem,C=f.rating||"N/A",R=`Problem${f.contestId}${f.index}`,y=f.tags.join(", "),U=new Date(u[0].creationTimeSeconds*1e3).toLocaleDateString("en-GB",{day:"numeric",month:"short",year:"numeric"}).replace(/ /g,"-");if((yield T.post(m,{action:"checkProblem",problemName:R},{headers:{"Content-Type":"text/plain"}})).data.exists){const r="Problem already exists in the spreadsheet!";console.log(r),e(r,!1);return}const _={action:"addProblem",problemRating:C,problemName:R,problemStatus:s.status,remarks:s.remarks,dateSolved:U,takeaways:s.takeaways,problemTopics:y,problemUrl:d},S=o.split("/")[5],i=I.replace("SECRET_HASH",S),b=yield T.post(i,_,{headers:{"Content-Type":"text/plain"}});if(b.status===200&&b.data.status==="success"){const r="Problem data successfully added to your Spreadsheet!";console.log(r),e(r,!0)}else{const r=`Failed to add problem data: ${b.data.message}`;console.error(r),e(r,!1)}}else{const p="Failed to fetch Problem details!";console.error(p),e(p,!1)}}catch(a){const n=`An error occurred while adding the problem: ${a}`;console.error(n),e(n,!1)}}))})}function $(s,e){return s.filter(t=>{const o=e.verdict?t.verdict===e.verdict:!0,c=e.contestId?t.contestId===e.contestId:!0,d=e.index?t.problem.index===e.index:!0;return o&&c&&d})}function F(s,e){return P(this,null,function*(){O.get(["APP_SCRIPT_URL","CODEFORCES_ID","CURRENT_TAB_URL"],t=>P(this,null,function*(){const{APP_SCRIPT_URL:o,CODEFORCES_ID:c,CURRENT_TAB_URL:d}=t,h=v.replace("CODEFORCES_ID",c);let m=!1;try{const l=yield fetch(h);let a,n;if(l.ok){const u=yield l.json();if((u==null?void 0:u.status)==="OK"){const i=d.split("/"),b=i.length,r=[i[b-1],i[b-2],i[b-3]];if(r.sort(),a={verdict:"OK",contestId:Number(r[0]),index:r[1]},n=$(u.result,a),m=n.length>0,!m){const g="Solve the problem first, then submit!";console.error(g),e(g,!1);return}}else{const i="Failed to fetch Problem details!";console.error(i),e(i,!1);return}const p=n[0].problem,f=p.rating||"N/A",C=`Problem${p.contestId}${p.index}`,R=p.tags.join(", "),A=new Date(n[0].creationTimeSeconds*1e3).toLocaleDateString("en-GB",{day:"numeric",month:"short",year:"numeric"}).replace(/ /g,"-"),U={action:"updateProblem",problemRating:f,problemName:C,problemStatus:s.status,remarks:s.remarks,dateSolved:A,takeaways:s.takeaways,problemTopics:R,problemUrl:d},x=o.split("/")[5],_=I.replace("SECRET_HASH",x),S=yield T.post(_,U,{headers:{"Content-Type":"text/plain"}});if(S.status===200&&S.data.status==="success"){const i="Problem data successfully updated to your Spreadsheet!";console.log(i),e(i,!0)}else{const i=`Failed to update problem data: ${S.data.message}`;console.error(i),e(i,!1)}}else{const u="Failed to fetch Problem details!";console.error(u),e(u,!1)}}catch(l){const a=`An error occurred while adding the problem: ${l}`;console.error(a),e(a,!1)}}))})}chrome.runtime.onInstalled.addListener(()=>{console.log("Extension installed.")});chrome.runtime.onMessage.addListener(s=>{s==="reload-extension"&&chrome.runtime.reload()});chrome.tabs.onUpdated.addListener((s,e,t)=>{e.url&&console.log("Tab URL changed to:",e.url)});chrome.action.onClicked.addListener(s=>{chrome.tabs.sendMessage(s.id,{action:"openModal"})});chrome.runtime.onMessage.addListener((s,e,t)=>{if(s.action==="submitProblem")return D(s.data,(o,c)=>{t(c?{status:"success",result:o}:{status:"error",error:o})}),!0;if(s.action==="updateProblem")return F(s.data,(o,c)=>{t(c?{status:"success",result:o}:{status:"error",error:o})}),!0});chrome.tabs.onUpdated.addListener((s,e,t)=>{if(e.url&&t.url.match(/^https:\/\/codeforces\.com\/(contest\/\d+\/problem\/[A-Z]|problemset\/problem\/\d+\/[A-Z])$/)){console.log("Codeforces problem page detected:",t.url);const o=t.url.split("/"),c=[o[o.length-1],o[o.length-2],o[o.length-3]].sort(),d=`Problem${c[0]}${c[1]}`;chrome.storage.local.get(["APP_SCRIPT_URL"],h=>{const m=h.APP_SCRIPT_URL;if(!m||m.trim()===""){console.warn("AppScript URL not found or is empty. Skipping check.");return}const l=m.split("/")[5],a=I.replace("SECRET_HASH",l);fetch(`${a}?problemName=${d}`).then(n=>n.json()).then(n=>{chrome.tabs.sendMessage(s,{action:"prefillModal",data:n}),console.log("Problem was previously added:"+(n==null?void 0:n.status))}).catch(n=>console.error("Error checking problem:",n))})}});
